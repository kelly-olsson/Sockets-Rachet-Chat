<?php

// The IoServer is responsible for binding the PHP process to an IP address and a port, and then running an event
// loop that listens for connections.
use Ratchet\Server\IoServer;

// The HttpServer is a class in Ratchet that handles incoming HTTP requests. It parses the headers and manages the
// handshake between the client and the server, "upgrading" it to a WebSocket connection when appropriate.
use Ratchet\Http\HttpServer;

// The WsServer class is the WebSocket server that manages WebSocket connections and provides an interface to
// communicate with clients.
use Ratchet\WebSocket\WsServer;

// This line is importing the Chat class from the MyApp namespace, which is a class to manage WebSocket
// interactions such as connection, disconnection, and receiving messages.
use MyApp\Chat;

// Includes the autoload.php file generated by Composer.
// This file is responsible for automatically loading all the dependencies installed via Composer, so each file doesn't
// need to be manually required.
require dirname(__DIR__) . '/vendor/autoload.php';

// Here we're declaring a constant named PORT and assigning it the value of 8182.
// This is the port number where the WebSocket server will be listening for connections.
const PORT = 8182;

// The IoServer is the base server in Ratchet, which is responsible for binding the PHP process to an IP and a port and then running an event loop to listen for connections.
// It takes two arguments: an instance of a class implementing the MessageComponentInterface (wrapped within WsServer and HttpServer) and a port number to listen to.
// The Chat instance is passed into the WsServer constructor, which is then passed into the HttpServer constructor.
// This encapsulates the WebSocket server within an HTTP server, allowing it to handle the initial HTTP handshake before "upgrading" the connection to a WebSocket connection.
// This IoServer instance is then assigned to the $server variable.
$server = IoServer::factory(
    new HttpServer(
        new WsServer(
            new Chat()
        )
    ),
    PORT
);

// The run method starts the event loop of the server, making it start listening for connections on the specified port.
// This is typically the last line of the server script, and the script will not exit until this process is terminated.
$server->run();
